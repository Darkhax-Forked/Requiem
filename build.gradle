// Credits to UpcraftLP for the base build script

import net.fabricmc.loom.task.RemapJar

import java.nio.charset.StandardCharsets

plugins {
    id "fabric-loom" version "0.2.0-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "maven-publish"
}

// Update JSON generation
apply from: 'https://raw.githubusercontent.com/Ladysnake/LadyLib/master/update_json.gradle'
build.finalizedBy updateJson

group = "io.github.Ladysnake"
sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "dissolution"
version = "1.0.0"

sourceSets {
    api {
        compileClasspath = main.compileClasspath
        runtimeClasspath = main.runtimeClasspath
    }
    reflective_fabric {
        compileClasspath = main.compileClasspath
        runtimeClasspath = main.runtimeClasspath
    }
    main {
        compileClasspath += api.output
        runtimeClasspath += api.output
        compileClasspath += reflective_fabric.output
        runtimeClasspath += reflective_fabric.output
    }
}

minecraft {
}

processResources {
    // this will ensure that this task is redone when there"s a change
    inputs.property "version", project.version

    def sources = sourceSets.stream().flatMap { ss -> ss.resources.srcDirs.stream() }.toArray()
    // replace stuff in fabric.mod.json, nothing else
    from(sources) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version
    }

    // copy everything else, that"s not the fabric.mod.json
    from(sources) {
        exclude "fabric.mod.json"
    }
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc:fabric:${fabric_version}"
//    modCompile "com.github.Ladysnake:Satin:b513da151c"
    compile files("libs/satin-1.0.0-SNAPSHOT-dev.jar")

    compile "org.jetbrains:annotations:${jb_annotations_version}"
    compile "com.google.code.findbugs:jsr305:${findbugs_version}"
    compile "org.apiguardian:apiguardian-api:${apiguardian_version}"
}

compileJava {
    options.encoding = StandardCharsets.UTF_8.name()
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }
}

jar {
    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.name}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": "${mc_version}",
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

task apiJar(type: Jar, dependsOn: classes) {
    classifier = 'api'
    from sourceSets.api.allSource
    from sourceSets.api.output
}

task remapApiJar(type: RemapJar, dependsOn: apiJar) {
    jar = apiJar.archivePath
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from "LICENSE.md"
    classifier = "javadoc"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
            artifact javadocJar
            artifact sourcesJar
        }
    }

    repositories {
        mavenLocal()
    }
}

curseforge {
    if (project.hasProperty("curse_key")) {
        apiKey = findProperty("curse_key")
    }

    if (project.hasProperty("curseforge_id")) {
        project {
            id = findProperty("curseforge_id")
            mainArtifact(jar) {
                displayName = "${project.archivesBaseName} MC${mc_version} v${mod_version}"
            }
            releaseType = project.release_type

            //TODO remove when MC 1.14 releases
            //usually automatically determined by the CurseGradle plugin
            addGameVersion '1.14-Snapshot'

            changelogType = "markdown"
            changelog = new File("changelog.md") //TODO generate changelog

            relations {

            }

            addArtifact javadocJar
            addArtifact sourcesJar
        }
        options {
            forgeGradleIntegration = false
        }

    }
}

tasks.publish.dependsOn build

afterEvaluate {
    //make curseforge task depend on build
    if (project.hasProperty("curseforge_id")) {
        tasks.each {
            if (it.name == "curseforge" + findProperty(curseforge_id)) {
                it.dependsOn build
                it.mustRunAfter build
            }
        }
    }
}