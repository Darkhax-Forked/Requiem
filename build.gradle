// Credits to UpcraftLP for the base build script


import net.fabricmc.loom.task.RemapJar

import java.time.Year

plugins {
    id "fabric-loom" version "0.2.1-SNAPSHOT"
    id "net.minecrell.licenser" version "0.4.1"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "maven-publish"
}

// Update JSON generation
apply from: 'https://raw.githubusercontent.com/Ladysnake/LadyLib/master/update_json.gradle'
build.finalizedBy updateJson

group = rootProject.maven_group
archivesBaseName = rootProject.name.toLowerCase(Locale.ROOT)
version = mod_version

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'maven-publish'

    archivesBaseName = "${rootProject.archivesBaseName}-${project.name.toLowerCase(Locale.ROOT)}"
    group = "${rootProject.group}.${rootProject.archivesBaseName}"
}

allprojects {

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = rootProject.mod_version

    /*
     Adds a JavadocJar task, javax annotations, manifest attributes, curseforge and maven configuration
     */
    apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/basic_project.gradle"

    sourceSets {
        api
    }

    processResources {
        inputs.property "version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    repositories {
        maven {
            url "http://maven.fabricmc.net/"
            name "Fabric"
        }
        maven {
            url "https://jitpack.io"
            name "JitPack"
        }
    }

    task apiJar(type: Jar, dependsOn: classes) {
        classifier = 'api'
        from sourceSets.api.allJava
        from (sourceSets.api.output) {
            include "fabric.mod.json"
            expand "version": project.version
        }
        from (sourceSets.api.output) {
            exclude "fabric.mod.json"
        }
    }

    task remapApiJar(type: RemapJar, dependsOn: apiJar) {
        jar = apiJar.archivePath
    }

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}"
        modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modCompile "net.fabricmc:fabric:${project.fabric_version}"
        
        // Lazily evaluated callable returning a non-live (unlike a FileCollection) list of files
        sourceSets.api.compileClasspath += files({sourceSets.main.compileClasspath.toList()})

        compile sourceSets.api.output
        include files(remapApiJar.getJar())
        
        modCompile "io.github.prospector.modmenu:ModMenu:${rootProject.modmenu_version}"
        modCompile "com.github.Ladysnake:Satin:${rootProject.satin_version}"

        compileOnly "org.jetbrains:annotations:${jb_annotations_version}"
        compileOnly "org.apiguardian:apiguardian-api:${apiguardian_version}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0-M1"
    }

    build.dependsOn(remapApiJar)

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

        // Apply licenses only to main source set
        include "**/*.java"
        exclude "**/package-info.java"

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.name
            projectOwners = rootProject.owners
            gplVersion = rootProject.gpl_version
        }

        newLine = false // Disables the empty line between the header and package name
    }
}

dependencies {
    include "com.github.Ladysnake:Satin:${satin_version}"
}

jar {
    from "LICENSE-CODE"
    from "LICENSE-ART"
}

license {
    exclude "**/RayHelper.java"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(apiJar) {
                builtBy remapApiJar
            }
        }
    }
}