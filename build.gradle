// Credits to UpcraftLP for the base build script


import com.modrinth.minotaur.TaskModrinthUpload

import java.time.Year

plugins {
    alias(libs.plugins.loom)
    id 'org.quiltmc.quilt-mappings-on-loom' version "3.1.1"
    id 'io.github.juuxel.loom-quiltflower' version "1.6.0"
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.jfrog.artifactory' version '4.21.0'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'com.modrinth.minotaur' version '1.2.1'
    id 'maven-publish'
    id 'java-library'
}

group = rootProject.maven_group
archivesBaseName = rootProject.name

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'maven-publish'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'java-library'
}

allprojects {

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    version = project.mod_version

    repositories {
        maven {
            name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
            content {
                includeGroup 'io.github.ladysnake'
                includeGroupByRegex 'dev\\.emi.*'
                includeGroupByRegex '(dev|io\\.github)\\.onyxstudios.*'
            }
        }
        maven {
            url = 'https://maven.cafeteria.dev'
            content {
                includeGroup 'net.adriantodt.fabricmc'
            }
        }
        maven {
            name = 'CottonMC'
            url = 'https://server.bbkr.space/artifactory/libs-release'
            content {
                includeGroup 'io.github.cottonmc'
            }
        }
        maven {
            url = 'https://maven.jamieswhiteshirt.com/libs-release/'
            content {
                includeGroup 'com.jamieswhiteshirt'
            }
        }
        maven {
            url = 'https://www.cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }
        maven {
            url 'https://maven.blamejared.com'
            content {
                includeGroupByRegex 'vazkii\\..*'
            }
        }
        maven {
            url = "https://maven.shedaniel.me/"
            content {
                includeGroupByRegex 'me\\.shedaniel\\..*'
                includeGroup 'me.sargunvohra.mcmods'
            }
        }
        maven {
            url = "https://maven.theillusivec4.top"
            content {
                includeGroupByRegex 'top\\.theillusivec4\\..*'
            }
        }
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
            content {
                includeGroup 'me.lucko'
            }
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/releases"
            content {
                includeGroupByRegex 'com.terraformersmc.*'
                includeGroup 'dev.emi'
            }
        }
        maven {
            url = "https://maven.siphalor.de"
            content {
                includeGroup 'de.siphalor'
            }
        }
        maven {
            url = 'https://api.modrinth.com/maven'
            content {
                includeGroup 'maven.modrinth'
            }
        }
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
            content {
                includeGroupByRegex '(io|com)\\.github\\..*'
            }
        }
        mavenLocal()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    java {
        withSourcesJar()
    }

    apply from: rootProject.file('utilities.gradle')

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings("net.fabricmc:yarn:${yarn_mappings}:v2")
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        compileOnly metaLibs.bundles.devAnnotations
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

        matching('ladysnake/**/api/**') {
            header = rootProject.file("code_quality/${project.api_license_header}_HEADER.txt")
        }

        include '**/*.java'
        exclude '**/package-info.java'
        exclude '**/model/lib/**.java'

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.display_name
            projectOwners = rootProject.owners
            gplVersion = rootProject.gpl_version
        }

        newLine = false // Disables the empty line between the header and package name
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        gametest {
            server()
            ideConfigGenerated true
            source sourceSets.testmod

            name "Requiem Game Test"

            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        autoTestServer {
            server()
            ideConfigGenerated true
            source sourceSets.testmod

            name "Auto Test Server"

            vmArg "-Dfabric.autoTest"
        }
    }
}
check.dependsOn runGametest

dependencies {
    // Looking for version definitions? see https://docs.gradle.org/7.4-rc-1/userguide/platforms.html

    // Required dependencies
    api include(project(path: ":requiem-api", configuration: "namedElements")) { transitive = false }
    api include(project(path: ":requiem-core", configuration: "namedElements")) { transitive = false }
    modImplementation libs.bundles.requiredLibraries
    include libs.bundles.requiredLibraries

    // Test dependencies
    testImplementation testLibs.junit
    testImplementation testLibs.mockito
    testmodImplementation testLibs.mockito
    modCompileOnly testLibs.elmendorf
    modLocalRuntime testLibs.elmendorf
    testmodImplementation sourceSets.main.output

    // Optional dependencies
    modCompileOnly libs.modmenu
    modLocalRuntime libs.modmenu
    modCompileOnly libs.bundles.cloth
    modLocalRuntime libs.bundles.cloth
    include libs.fiberToCloth

    // Extra compatibility dependencies
//    modLocalRuntime compatLibs.mobz
    modCompileOnly (compatLibs.betterGraves) { transitive = false }
//    modLocalRuntime compatLibs.betterGraves
//    modCompileOnly compatLibs.biomeMakeover
//    modLocalRuntime compatLibs.biomeMakeover
    modCompileOnly (compatLibs.trinkets) { transitive = false }
//    modLocalRuntime compatLibs.trinkets
    modCompileOnly (compatLibs.pehkui) { transitive = false }
//    modLocalRuntime compatLibs.pehkui
    modCompileOnly (compatLibs.snowmercy) { transitive = false }
//    modLocalRuntime compatLibs.snowmercy
    modCompileOnly (compatLibs.bundles.origins) { transitive = false }
    modLocalRuntime (compatLibs.bundles.origins) { transitive = false }

    modCompileOnly (compatLibs.eldritchMobs) { transitive = false }
//    modLocalRuntime compatLibs.eldritchMobs
    modCompileOnly (compatLibs.haema) { transitive = false }
//    modLocalRuntime compatLibs.bundles.haema
    modCompileOnly (compatLibs.golemsGalore) { transitive = false }
//    modLocalRuntime compatLibs.bundles.golemsGalore
    modCompileOnly (compatLibs.bumblezone) { transitive = false }
//    modLocalRuntime compatLibs.bumblezone
    modCompileOnly (compatLibs.bewitchment) { transitive = false }
//    modLocalRuntime compatLibs.bundles.bewitchment
}

remapJar.dependsOn(project(":requiem-core").tasks.remapJar)

jar {
    from 'LICENSE-CODE'
    from 'LICENSE-ART'
}

license {
    exclude '**/RayHelper.java'
}

ext {
    // no idea how else to import TaskModrinthUpload from release.gradle
    ModrinthUpload = TaskModrinthUpload
}

apply from: 'release.gradle'
